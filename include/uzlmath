//
//  Created by Denis-Michael Lux on 11.01.15.
//
//  This software may be modified and distributed under the terms
//  of the BSD license. See the LICENSE file for details.
//

#ifndef UZLMATH_INCLUDES
#define UZLMATH_INCLUDES

#include <iostream>
#include <sstream>
#include <iomanip>

#include <cstdlib>
#include <cmath>
#include <sys/time.h>
//#include <unistd.h>

#include <string.h>     // memcpy, memset

#if _OPENMP
    #include <omp.h>
#endif

// Define functions
#define UZL_MAX(A, B) ((A) > (B) ? (A) :  (B))
#define UZL_MIN(A, B) ((A) > (B) ? (B) :  (A))
#define UZL_ABS(A)    ((A) >  0  ? (A) : (-A))

// defining namespace for uzlmath classes and functions
namespace uzlmath
{
    ////////////////////////////////////////
    // Global setting variables           //
    ////////////////////////////////////////
    #include "uzlmath_headers/glob_vars.hpp"
    
    
    ////////////////////////////////////////
    // Forward declarations               //
    ////////////////////////////////////////
    #include "uzlmath_headers/forward_declarations.hpp"


    ////////////////////////////////////////
    // Typedefs                           //
    ////////////////////////////////////////
    #include "uzlmath_headers/typedefs.hpp"


    ////////////////////////////////////////
    // Traits                             //
    ////////////////////////////////////////
    #include "uzlmath_headers/traits.hpp"


    ////////////////////////////////////////
    // Wrapper interface                  //
    ////////////////////////////////////////
    #include "uzlmath_headers/lib_wrapper.hpp"


    ////////////////////////////////////////
    // Restrictors                        //
    ////////////////////////////////////////
    #include "uzlmath_headers/restrictors.hpp"


    ////////////////////////////////////////
    // Class prototypes                   //
    ////////////////////////////////////////
    #include "uzlmath_headers/base_dec.hpp"
    #include "uzlmath_headers/complex_dec.hpp"
    #include "uzlmath_headers/grid3D_dec.hpp"
    #include "uzlmath_headers/cx_grid3D_dec.hpp"
    #include "uzlmath_headers/cx_matrix_dec.hpp"
    #include "uzlmath_headers/cx_vector_dec.hpp"
    #include "uzlmath_headers/factorial.hpp"
    #include "uzlmath_headers/glue_dec.hpp"
    #include "uzlmath_headers/matrix_dec.hpp"
    #include "uzlmath_headers/memory_dec.hpp"
    #include "uzlmath_headers/soft_fourier_coefficients.hpp"
    #include "uzlmath_headers/stopwatch.hpp"
    #include "uzlmath_headers/vector_dec.hpp"


    ////////////////////////////////////////
    // Class implementation               //
    ////////////////////////////////////////
    #include "uzlmath_headers/base_def.hpp"
    #include "uzlmath_headers/complex_def.hpp"
    #include "uzlmath_headers/grid3D_def.hpp"
    #include "uzlmath_headers/cx_grid3D_def.hpp"
    #include "uzlmath_headers/cx_matrix_def.hpp"
    #include "uzlmath_headers/cx_vector_def.hpp"
    #include "uzlmath_headers/glue_def.hpp"
    #include "uzlmath_headers/matrix_def.hpp"
    #include "uzlmath_headers/memory_def.hpp"
    #include "uzlmath_headers/vector_def.hpp"


    ////////////////////////////////////////
    // Function implementations           //
    ////////////////////////////////////////
    #include "uzlmath_headers/fn_fliplr_matrix.hpp"
    #include "uzlmath_headers/fn_orthopoly.hpp"
    #include "uzlmath_headers/fn_cx_sqrt.hpp"
    #include "uzlmath_headers/fn_cx_ntrt.hpp"
    #include "uzlmath_headers/fn_matrix_lu.hpp"
    #include "uzlmath_headers/fn_matrix_inv.hpp"
    #include "uzlmath_headers/fn_wigner.hpp"
    #include "uzlmath_headers/fn_dwt.hpp"
    #include "uzlmath_headers/fn_fourier_transforms.hpp"
    #include "uzlmath_headers/fn_rand_coeff.hpp"
    #include "uzlmath_headers/fn_rand_matrix.hpp"
    #include "uzlmath_headers/fn_rand_vector.hpp"
    #include "uzlmath_headers/fn_obj2file_grid3D.hpp"
    #include "uzlmath_headers/fn_obj2file_soft_coeff.hpp"
}

#endif